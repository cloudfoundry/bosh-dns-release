#!/bin/bash -exu

set -o pipefail

RUN_DIR=/var/vcap/sys/run/bosh-dns
PIDFILE=$RUN_DIR/bosh-dns.pid
LOG_DIR=/var/vcap/sys/log/bosh-dns
JOB_DIR=/var/vcap/jobs/bosh-dns
DNS_PACKAGE=/var/vcap/packages/bosh-dns
SCRIPT_NAME=bosh_dns_ctl

function start_logging() {
  exec > >(prepend_datetime >> $LOG_DIR/${SCRIPT_NAME}.stdout.log)
  exec 2> >(prepend_datetime >> $LOG_DIR/${SCRIPT_NAME}.stderr.log)
}

function prepend_datetime() {
  LOG_FORMAT=<%= p('logging.format.timestamp') %>

  if [ "$LOG_FORMAT" == "deprecated" ]; then
    awk -W interactive '{ system("echo -n [$(date +\"%Y-%m-%d %H:%M:%S%z\")]"); print " " $0 }'
  else
    perl -ne 'BEGIN { use Time::HiRes "time"; use POSIX "strftime"; STDOUT->autoflush(1) }; my $t = time; my $fsec = sprintf ".%09d", ($t-int($t))*1000000000; my $time = strftime("[%Y-%m-%dT%H:%M:%S".$fsec."Z]", localtime $t); print("$time $_")'
  fi
}

function pid_exists() {
  ps -p $1 &> /dev/null
}

function create_directories_and_chown_to_vcap() {
  mkdir -p "${LOG_DIR}"
  chown -R vcap:vcap "${LOG_DIR}"

  mkdir -p "${RUN_DIR}"
  chown -R vcap:vcap "${RUN_DIR}"
}

function create_network_alias() {
  if ! ip addr show dev lo | grep -q <%= p('address') %>
  then
    ip addr add <%= p('address') %> dev lo
  fi
}

function remove_network_alias() {
  if ip addr show dev lo | grep -q <%= p('address') %>
  then
    ip addr del <%= p('address') %>/32 dev lo
  fi
}

function create_network_interface() {
  if ! ip addr show dev bosh-dns
  then
    ip link add bosh-dns type dummy
    ip addr add <%= p('address') %>/32 dev bosh-dns
    ip link set bosh-dns up
    resolvectl dns bosh-dns <%= p('address') %>
    resolvectl log-level <%= p('log_level')%>
  fi
}

function remove_network_interface() {
  if ip addr show dev bosh-dns
  then
    ip link delete bosh-dns
  fi
}

function start_dns() {
  if [ -e "$PIDFILE" ]; then
    pid=$(head -1 "${PIDFILE}")
    if pid_exists "$pid"; then
      return 0
    fi
  fi

  setcap cap_net_bind_service=+ep ${DNS_PACKAGE}/bin/bosh-dns
  ulimit -n 65536

  pushd ${JOB_DIR}

  chpst -u vcap:vcap \
    "${DNS_PACKAGE}/bin/bosh-dns" \
    --config "${JOB_DIR}/config/config.json" \
    1>> ${LOG_DIR}/bosh_dns.stdout.log \
    2>> ${LOG_DIR}/bosh_dns.stderr.log &
  popd

  echo $! > $PIDFILE
}

function stop_dns() {
  local pid

  if [ -e $PIDFILE ]
  then
    pid=$(head -1 $PIDFILE)
  else
    exit 0
  fi

  if [ ! -z $pid ] && pid_exists $pid
  then
    set +e
    kill -15 $pid
    set -e
  fi

  if [ -e /proc/$pid ]
  then
    set +e
    kill -9 $pid
    set -e
  fi

  rm -f $PIDFILE
}

function main() {
  create_directories_and_chown_to_vcap
  start_logging

  case ${1} in
    start)
      <% if p('configure_systemd_resolved') -%>
      create_network_interface
      "${DNS_PACKAGE}/bin/bosh-dns-systemd-resolved-updater" --config "${JOB_DIR}/config/config.json"
      <% else -%>
      create_network_alias
      <% end -%>
      start_dns
      ;;

    stop)
      stop_dns
      <% if p('configure_systemd_resolved') -%>
      remove_network_interface
      <% else -%>
      remove_network_alias
      <% end -%>
      ;;

    *)
      echo "Usage: ${0} {start|stop}"
      ;;
  esac
}

main $@
